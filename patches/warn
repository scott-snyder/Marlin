Bottom: 0e3ec1cd56c26e12b0b3e12272592e456b58f401
Top:    9181c078f399e5dfd48d9a6c9f7d6cb9779a583a
Author: scott snyder <sss@karma>
Date:   2020-02-03 10:17:07 -0500

Fix compilation warnings.


---

diff --git a/source/include/jenkinsHash.h b/source/include/jenkinsHash.h
index 19b5722..dfb7b04 100644
--- a/source/include/jenkinsHash.h
+++ b/source/include/jenkinsHash.h
@@ -110,16 +110,26 @@ unsigned jenkins_hash ( unsigned char *k, unsigned length, unsigned initval )
   
   switch ( len ) {
   case 11: c += ( (unsigned)k[10] << 24 );
+    // FALLTHROUGH
   case 10: c += ( (unsigned)k[9] << 16 );
+    // FALLTHROUGH
   case 9 : c += ( (unsigned)k[8] << 8 );
     /* First byte of c reserved for length */
+    // FALLTHROUGH
   case 8 : b += ( (unsigned)k[7] << 24 );
+    // FALLTHROUGH
   case 7 : b += ( (unsigned)k[6] << 16 );
+    // FALLTHROUGH
   case 6 : b += ( (unsigned)k[5] << 8 );
+    // FALLTHROUGH
   case 5 : b += k[4];
+    // FALLTHROUGH
   case 4 : a += ( (unsigned)k[3] << 24 );
+    // FALLTHROUGH
   case 3 : a += ( (unsigned)k[2] << 16 );
+    // FALLTHROUGH
   case 2 : a += ( (unsigned)k[1] << 8 );
+    // FALLTHROUGH
   case 1 : a += k[0];
   }
   
diff --git a/source/src/ConditionsProcessor.cc b/source/src/ConditionsProcessor.cc
index 6269cbc..b0627c6 100644
--- a/source/src/ConditionsProcessor.cc
+++ b/source/src/ConditionsProcessor.cc
@@ -35,7 +35,7 @@ namespace marlin{
       lccd::LCConditionsMgr::instance()->registerChangeListener( cl , name ) ;
       return true ;
     }
-    catch(Exception){}
+    catch(const Exception&){}
     
     return false ;
   }
diff --git a/source/src/ProcessorMgr.cc b/source/src/ProcessorMgr.cc
index ae4a112..ed1d8ea 100644
--- a/source/src/ProcessorMgr.cc
+++ b/source/src/ProcessorMgr.cc
@@ -316,7 +316,7 @@ namespace marlin{
             gearDetName = Global::GEAR->getDetectorName()  ; 
 
         }
-        catch( gear::UnknownParameterException ){ 
+        catch( const gear::UnknownParameterException& ){ 
 
             doConsistencyCheck = false ;
         }
diff --git a/source/src/XMLFixCollTypes.cc b/source/src/XMLFixCollTypes.cc
index e778131..9762ff8 100644
--- a/source/src/XMLFixCollTypes.cc
+++ b/source/src/XMLFixCollTypes.cc
@@ -91,7 +91,7 @@ namespace marlin{
 	      
 	    }
 	    
-	    catch( ParseException ) { }
+	    catch( const ParseException& ) { }
 	    
 	    
 	    if( inType != processor->getLCIOInType( name )  ) {
@@ -121,7 +121,7 @@ namespace marlin{
 // 			<< std::endl ;
 	      
 	    }      
-	    catch( ParseException ) { }
+	    catch( const ParseException& ) { }
 	    
 	    
 	    if( outType != processor->getLCIOOutType( name )  ) {
diff --git a/source/src/XMLParser.cc b/source/src/XMLParser.cc
index 84afa29..0863b8c 100644
--- a/source/src/XMLParser.cc
+++ b/source/src/XMLParser.cc
@@ -383,7 +383,7 @@ namespace marlin{
 
             try{  inputLine = getAttribute( par , "value" )  ; 
             }      
-            catch( ParseException ) {
+            catch( const ParseException& ) {
 
                 if( par->FirstChild() )
                     inputLine =  par->FirstChild()->Value() ;
@@ -433,7 +433,7 @@ namespace marlin{
         if( par->ToElement() )
           par->ToElement()->SetAttribute( "value", inputLine );
       }      
-      catch( ParseException ) {
+      catch( const ParseException& ) {
 
           if( par->FirstChild() )
               par->FirstChild()->SetValue( inputLine ) ;
@@ -479,7 +479,7 @@ namespace marlin{
                 lcioInTypes.push_back( colType ) ; 
 
             }      
-            catch( ParseException ) { }
+            catch( const ParseException& ) { }
 
             try{  
 
@@ -489,7 +489,7 @@ namespace marlin{
                 lcioOutTypes.push_back( colType ) ; 
 
             }      
-            catch( ParseException ) { }
+            catch( const ParseException& ) { }
 
 
 
diff --git a/test/marlintest/src/TestProcessorEventSeeder.cc b/test/marlintest/src/TestProcessorEventSeeder.cc
index 037ec01..e3d0b72 100644
--- a/test/marlintest/src/TestProcessorEventSeeder.cc
+++ b/test/marlintest/src/TestProcessorEventSeeder.cc
@@ -60,7 +60,7 @@ void TestProcessorEventSeeder::processEvent( LCEvent * evt ) {
   try{
     Global::EVENTSEEDER->registerProcessor(this);
   }
-  catch( lcio::Exception ) {
+  catch( const lcio::Exception& ) {
   
   }
